import axios from "axios";
import jwkToPem from "jwk-to-pem";
import * as jsonwebtoken from "jsonwebtoken";
import jwkToBuffer from "jwk-to-pem";

export class Constants {
  static BaseURL = "https://www.cotter.app/api/v0";
  static JWTKID = "SPACE_JWT_PUBLIC:8028AAA3-EC2D-4BAA-BE7A-7C8359CCB9F9";
  static JWKSPath = "/token/jwks";
  static JWTAlgo: jsonwebtoken.Algorithm = "ES256";
}

interface PublicKey extends jwkToBuffer.ECPrivate {
  kid: string;
  use: string;
}

interface PublicKeys {
  keys: PublicKey[];
}

interface PublicKeyMeta {
  instance: PublicKey;
  pem: string;
}

interface MapOfKidToPublicKey {
  [key: string]: PublicKeyMeta;
}

let cacheKeys: MapOfKidToPublicKey | undefined;
const getPublicKeys = async (BaseURL: string): Promise<MapOfKidToPublicKey> => {
  if (!cacheKeys) {
    const url = `${BaseURL}${Constants.JWKSPath}`;
    const publicKeys = await axios.get<PublicKeys>(url);
    cacheKeys = publicKeys.data.keys.reduce((agg, current) => {
      const pem = jwkToPem(current);
      agg[current.kid] = { instance: current, pem };
      return agg;
    }, {} as MapOfKidToPublicKey);
    return cacheKeys;
  } else {
    return cacheKeys;
  }
};

const CotterValidateJWT = async (token: string): Promise<boolean> => {
  const jwtKeys = await getPublicKeys(Constants.BaseURL);
  const pubKey = jwtKeys[Constants.JWTKID];
  console.log(Constants.BaseURL);

  let errResp: any | undefined;
  jsonwebtoken.verify(
    token,
    pubKey.pem,
    { algorithms: [Constants.JWTAlgo] },
    function (err: any) {
      errResp = err;
    }
  );
  if (errResp) {
    console.log("Access token is inavlid" + JSON.stringify(errResp));
    return false;
  }
  return true;
};

export default CotterValidateJWT;
